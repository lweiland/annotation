// Generated by CoffeeScript 1.4.0
(function() {
  var DB_NAME, STORE_NAME, add_annotations, add_toolbar, annotations, db, delay, generate_qrel, load_existing_annotations, 
  notify, set_annotation, states, upload_url,g5;

  window.indexedDB = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;

  DB_NAME = "laura-annotations";

  STORE_NAME = "annotations";

  upload_url = "/annotation";

  String.prototype.hashCode = function() {
    var chr, hash, i, _, _i, _len;
    hash = 0;
    if (this.length === 0) {
      return hash;
    }
    for (i = _i = 0, _len = this.length; _i < _len; i = ++_i) {
      _ = this[i];
      chr = this.charCodeAt(i);
      hash = ((hash << 5) - hash) + chr;
      hash |= 0;
    }
    return hash;
  };

  db = null;

  annotations = {};

  g5=['0','5'];
  states = ['0', '1', '2', '3', '4'];
  vistates = ['undefined', 'not','vis'];
  /*
  *
  * Sets the click-corresponding radiobulb on true (fills the bulb)
  * and stores in database
  *
  */  
  set_annotation = function(ev) {
    var ann_id, el, fields, objectStore, req, val, vis, relvi;
    el = $(this);
    ann_id = (el.attr("data-ann-id"));  //parseInt()
    val = el.val();
	
	
    fields = annotations[ann_id].fields;
    $("input[value=" + val + "]", $(fields)).prop("checked", true);
	
	/*
	var sel = $("option[data-ann-id='"+ann_id+"']");
	vis = sel.val();
	$("option[value="+ vis + "]").prop("selected", true);
	)
	*/
	
//	$("option[value="+ vis + "]", $(fields)).prop("selected", true);
//	for(var i in fields){
//		console.log($("option[value="+ vis + "]", $(fields)).prop("selected", true));
//	}
	
//	console.log(sel);
    objectStore = db.transaction([STORE_NAME], "readwrite").objectStore(STORE_NAME);
   
	var given;
	req = objectStore.openCursor(ann_id);
	req.onsuccess = function(event){
		var cursor = event.target.result;
		if(cursor){
			given = cursor.value;
			given = given.relvi;
			console.log("given set annotation"+ given);
		}else{
			given =  "undefined";
		}
	
	
 
   
   
	
   req = objectStore.put({
      'ann_id': ann_id,
      rel: val,
	  relvi: given,
      query: annotations[ann_id].query,
      item: annotations[ann_id].item
    });
    req.onerror = function(ev) {
      return console.log("Failed to set annotation: " + req.error);
    };
    return req.onsuccess = function(ev) {
      return console.log("Set annotation " + ann_id + " to " + val + " "+given);
    };
	};
  };

  
  
 
  
  
  
  
  
 /*
 *
 *
 * stores the change of the select drop down into the objectStore 
 */
 set_change = function(ev){
	// alert( $(this).find(":selected").val() );
	
	var ann_id, el, fields, objectStore, req, val, vis, relvi;
    console.log("set change function");
	
	el = $(this);
    ann_id = (el.attr("data-ann-id"));  //parseInt()
	console.log(ann_id);
    vis = el.val();
		
	objectStore = db.transaction([STORE_NAME], "readwrite").objectStore(STORE_NAME);
	var given;
	req = objectStore.openCursor(ann_id);
	req.onsuccess = function(event){
		var cursor = event.target.result;
		if(cursor){
			given = cursor.value;
			given = given.rel;
			console.log("given set change"+ given);
		}else{
			given =  "0";
		}
	
	console.log("given after set change"+ given);
	
	req = objectStore.put({
      'ann_id': ann_id,
	  rel: given,
	  relvi: vis,
      query: annotations[ann_id].query,
      item: annotations[ann_id].item
    });
	
    req.onerror = function(ev) {
      return console.log("Failed to set annotation: " + req.error);
    };
    return req.onsuccess = function(ev) {
      return console.log("Set annotation " + ann_id + " to " + val + " entity is "+ vis);
    };
	};
 };

  
  
  
  
  
  
  //adds the radio buttons to each entity
  add_annotations = function() {
    return $(".annotation").each(function(i) {
      var ann_id, el, state, _, _fn, _vfn;
      el = $(this);
      ann_id = (el.data('query') + el.data('item')).hashCode();
      if (!annotations[ann_id]) {
        annotations[ann_id] = {
          query: el.data('query'),
          item: el.data('item'),
          fields: []
        };
      }
      el.append($('<label>', {
        'for': "ann-\"" + i + "\"-not-relevant"
      }).html('0'));
      _fn = function(state) {
        var opt;
        opt = $("<input>", {
          type: "radio",
          name: "group-" + i,
          value: state,
          'data-ann-id': ann_id
        });
        opt.click(set_annotation);
        return el.append(opt);
      };
      for (_ in states) {
        state = states[_];
        _fn(state);
      }
      el.append($('<label>', {
        'for': "ann-\"" + i + "\"-relevant"
      }).html('4'));
	  

	return annotations[ann_id].fields.push(el[0]);
    });
  
  };


  
  
  //adds the radio buttons to each entity
  add_annotationsg5 = function() {
    return $(".annotation-g5").each(function(i) {
      var ann_id, el, state, _, _fn, _vfn;
      el = $(this);
      ann_id = (el.data('query') + el.data('item')).hashCode();
      if (!annotations[ann_id]) {
        annotations[ann_id] = {
          query: el.data('query'),
          item: el.data('item'),
          fields: []
        };
      }
	 el.append($('<label>', {
        'for': "ann-\"" + i + "\"-not-relevant"
      }).html('0'));
   
      _fn = function(state) {
        var opt;
        opt = $("<input>", {
          type: "radio",
          name: "group-g5-" + i,
          value: state,
          'data-ann-id': ann_id
        });
        opt.click(set_annotation);
        return el.append(opt);
      };
      for (_ in g5) {
        state = g5[_];
        _fn(state);
      }
      el.append($('<label>', {
        'for': "ann-\"" + i + "\"-relevant"
      }).html('5'));
	  

	return annotations[ann_id].fields.push(el[0]);
    });
  
  };
  

/*
* adds the select options to an entity
*/
add_vis = function(){
 return $(".sel").each(function() {
      var ann_id, el, state, _, _fn, _vfn;
      el = $(this);
      ann_id = (el.data('query') + el.data('item')).hashCode();
      
	/*if (!annotations[ann_id]) {
        annotations[ann_id] = {
          query: el.data('query'),
          item: el.data('item'),
          fields: []
        };
      }*/

	  //append select vis/nonvis
     	var ann_id_vis = ann_id
	    el.append($('<select>', {
		'id': ann_id_vis
	}));     
     
	//var select = document.getElementById(ann_id_vis);
	//var select = $('#'+ann_id_vis)//$("select"); slects all  ann_id_vis
 var select = $('select[id=' + ann_id_vis + "]");
	//console.log("vistates" + select);

	
      _fn = function(vistate) {
        var opt;
       	opt = $("<option>", {
          value: vistate,
          'data-ann-id': ann_id
        });
		opt.append(vistate);
		opt.click(set_change);
	   //opt.on('change', set_change);
       return select.append(opt); //select.append(opt);// ergibt [object object ]opt;//select.append(opt);
      };


	var option_str;
      for (_ in vistates) {
        vistate = vistates[_];
		_fn(vistate); //
    
      }

   return annotations[ann_id].fields.push(el[0]);
    });
  
  };









  add_toolbar = function() {
    var clear_btn, div, export_btn, sess, status, upload_btn;
    div = $("<div>").attr('id', 'toolbar').addClass("toolbar");
    status = $("<span>");
    div.append(status);
    sess = $("<input>", {
      id: "session-name",
      placeholder: "Session name"
    });
    sess.change(function(ev) {
      return sessionStorage.setItem("session-name", $(this).val());
    });
    sess.val(sessionStorage.getItem("session-name"));
    div.append(sess);
    export_btn = $("<button>Export</button>");
    div.append(export_btn);
    export_btn.click(function() {
      return generate_qrel(function(qrel) {
        var area;
        $("#qrel").remove();
        area = $("<textarea>", {
          id: "qrel"
        }).html(qrel);
        area.css('width', '50em');
        return $("#toolbar").after(area);
      });
    });
    upload_btn = $("<button>Upload</button>");
    div.append(upload_btn);
    upload_btn.click(function() {
      return generate_qrel(function(qrel) {
        var passwd;
        passwd = window.prompt("Password?");
        return $.ajax(upload_url, {
          type: "POST",
          data: {
            "user": $("#session-name").val(),
            "password": passwd,
            "qrel": qrel
          }
        });
      });
    });
    clear_btn = $("<button>Clear</button>");
    clear_btn.click(function() {
      var req;
      req = db.transaction([STORE_NAME], "readwrite").objectStore(STORE_NAME).clear();
      req.onsuccess = function() {
        console.log("Clear successful");
        return $("input").attr("checked", false);
      };
      return req.onerror = function() {
        return console.log("Clear failed: " + req.error);
      };
    });
    div.append(clear_btn);
    return $("body").prepend(div);
  };



  generate_qrel = function(on_done) {
    var accum, objectStore, req, sess, name, given, textbox;
    objectStore = db.transaction([STORE_NAME], "readonly").objectStore(STORE_NAME);
    accum = "";
    req = objectStore.openCursor();
    sess = $("#session-name").val();
    if (sess === "") {
      sess = "0";
    }
	
	
	// = 
	//console.log(textbox)
	//input[type=button]
	var textbox = $("#alternative").val();
	var lines = textbox.split('\n');
	var tbid = $("textarea#alternative").attr("data-query");
	console.log(tbid);
	
	var additionals = $("#additionals").val();
	var linea = additionals.split('\n');
	var tbi = $("textarea#additionals").attr("data-query");
	console.log(tbi);	
	
	
    return req.onsuccess = function(ev) {
		console.log("req.onsuccess");
		
		
      var cursor, rel, vis, val;
      cursor = ev.target.result;
	    
	   
      if (cursor) {
		  
		 console.log("if cursor"); 
		  
        val = cursor.value;
		given = cursor.value;
		console.log(val);
       
	   rel = (function() {
          switch (val.rel) {
            case '0':
              return 0;
            case '1':
              return 1;
			case '2':
              return 2;
			case '3':
              return 3;
			case '4':
              return 4;
			case '5':
              return 5;
            default:
              return null;
          }
		})();
		
		relvi = (function() {
			console.log("relvi function "+given);	
			given = given.relvi;   
			console.log("relvi function "+given);				
			switch(given){
				case 'not':
					return "not";
				case 'vis':
					return "vis";
				case 'undefined':
					return "undefined";
				
			}
			
        })();
		
        if (rel !== null || relvi !== null) {
          accum = accum + ("" + val.query + " " + sess + " " + val.item + " " + rel +" "+ relvi + "\n");
        }
						
        return cursor["continue"]();
      }
		else {
		


		if(textbox!== null){
		  for(var i = 0;i < lines.length;i++){
			//code here using lines[i] which will give you each line
		//htmlD+=lines[i];
		// in some browsers textareas are never empty, might contain "\n" ...
		if(lines[i].length !== 0){
			accum = accum + ("" + tbid + " " + sess + " " + lines[i]+ "\n");
			}
		  }
			console.log(textbox+ " "+ lines.length+ " "+lines[i]);
	  // return cursor["continue"]();
      } 
	  console.log("vor if additionals");
	 if(additionals!== null){
		 console.log(additionals);
		 
		  for(var i = 0;i < linea.length;i++){
			  if(linea[i].length !== 0){
			//code here using lines[i] which will give you each line
		//htmlD+=lines[i];
			accum = accum + ("" + tbi + " " + sess + " " + linea[i]+ "\n");
			}
		 }
	    //return cursor["continue"]();
      } 		
			
			
			
			
        return on_done(accum);
      }	  
	  
	  
	  
	 
    };
  };

 
  load_existing_annotations = function() {
    var ann, ann_id, _results;
    _results = [];
    for (ann_id in annotations) {
      ann = annotations[ann_id];
      _results.push((function(ann_id, ann) {
        var objectStore, req;
        ann_id = parseInt(ann_id);
        objectStore = db.transaction([STORE_NAME], "readonly").objectStore(STORE_NAME);
        req = objectStore.get(ann_id);
        return req.onsuccess = function(ev) {
          var rel;
          if (ev.target.result) {
            rel = ev.target.result.rel;
            return $("input[value=" + rel + "]", ann.fields).attr('checked', true);
          }
        };
      })(ann_id, ann));
    }
    return _results;
  };

  delay = function(ms, func) {
    return setTimeout(func, ms);
  };

  notify = function(msg, klass) {
    var el;
    el = $('<li>').html(msg);
    el.addClass(klass);
    $("#notifications").append(el);
    return delay(5000, function() {
      return el.fadeOut();
    });
  };
  
  

  $(document).ready(function() {
    var notifications, req;
    add_toolbar();
    add_annotations();
	add_annotationsg5();
    add_vis();
    $("head").append($("<style>        #notifications { float: right; list-style: none; }        #notifications li { border-radius: 1em; margin: 1em; padding: 2em; }        #notifications li.fail { background-color: #fdd; }        #notifications li.success { background-color: #ded; }        </style>"));
    notifications = $('<ul id="notifications"></ul>');
    notifications = $("body").prepend(notifications);
    req = window.indexedDB.open(DB_NAME, 4);
    req.onsuccess = function(ev) {
      db = this.result;
      return load_existing_annotations();
    };
    return req.onupgradeneeded = function(ev) {
      db = ev.target.result;
      return db.createObjectStore(STORE_NAME, {
        keyPath: "ann_id"
      });
    };
  });

  $(document).ajaxError(function(ev, resp) {
    return notify(resp.responseText, 'fail');
  });

  $(document).ajaxSuccess(function(ev, resp) {
    return notify("annotation successfully saved", 'success');
  });

}).call(this);
